<!DOCTYPE html>
<html>
  <head>
    <%- include('partials/head') %>
  </head>
  <body style="background-color: #b0e0e6">
    <div class="admin-container">
      <!-- Header -->
      <div class="admin-header">
        <h1 class="admin-title">Admin Panel</h1>
        <div>
          <a
            href="/"
            class="btn btn-secondary btn-lg"
            style="margin-right: 1rem"
            >F≈ëoldal</a
          >
          <a href="/admin/logout" class="btn btn-danger btn-lg"
            >Kijelentkez√©s</a
          >
        </div>
      </div>

      <!-- Create New Szekreny Section -->
      <div class="new-szekreny-section">
        <h2 class="section-title">√öj Szekr√©ny L√©trehoz√°sa</h2>
        <form id="createSzekrenyForm">
          <div class="form-row">
            <div class="form-group">
              <label for="newSzekrenyNumber">Szekr√©ny Sz√°m: *</label>
              <input
                type="number"
                class="form-control"
                id="newSzekrenyNumber"
                required
                min="1"
                placeholder="pl. 3"
              />
            </div>
            <div class="form-group">
              <label for="newSzekrenyName">N√©v (opcion√°lis):</label>
              <input
                type="text"
                class="form-control"
                id="newSzekrenyName"
                placeholder="pl. Mell√©k√©p√ºlet"
              />
            </div>
          </div>
          <button type="submit" class="btn btn-success btn-lg">
            ‚ûï Szekr√©ny L√©trehoz√°sa
          </button>
        </form>
      </div>

      <!-- Szekrenys Container -->
      <div id="szekrenysContainer">
        <div class="text-center" style="padding: 3rem">
          <p style="font-size: 1.2rem; color: #7f8c8d">Adatok bet√∂lt√©se...</p>
        </div>
      </div>
    </div>

    <script>
      let szekrenysData = <%- JSON.stringify(szekrenysData) %>;

      // Render data on page load
      $(document).ready(function() {
        renderSzekrenys();
      });

      // Render all szekrenys
      function renderSzekrenys() {
        const container = $('#szekrenysContainer');
        container.empty();

        if (szekrenysData.length === 0) {
          container.html('<div class="empty-state">M√©g nincs egy szekr√©ny sem. Hozz l√©tre egyet fent!</div>');
          return;
        }

        szekrenysData.forEach(function(szekreny, index) {
          const card = createSzekrenyCard(szekreny, index);
          container.append(card);
        });
      }

      // Create szekreny card HTML
      function createSzekrenyCard(szekreny, index) {
        const displayName = szekreny.name || 'Room ' + szekreny.szekreny;

        return `
          <div class="szekreny-card" data-index="${index}">
            <div class="card-header" onclick="toggleCard(${index})">
              <div>
                <h2>
                  <span class="expand-icon" id="icon-${index}">‚ñº</span>
                  Szekr√©ny #${szekreny.szekreny} - ${displayName}
                </h2>
              </div>
              <div>
                <button class="btn btn-success action-btn" onclick="saveSzekreny(${index}); event.stopPropagation();" style="margin-right: 0.5rem;">
                  üíæ Ment√©s
                </button>
                <button class="btn btn-danger action-btn" onclick="deleteSzekreny(${index}); event.stopPropagation();">
                  üóëÔ∏è T√∂rl√©s
                </button>
              </div>
            </div>
            <div class="card-body" id="body-${index}">
              <!-- Name Section -->
              <div class="card-section">
                <h3 class="section-title">Szekr√©ny N√©v</h3>
                <div class="form-group">
                  <input type="text" class="form-control" value="${szekreny.name}" onchange="updateSzekrenyName(${index}, this.value)" placeholder="Szekr√©ny neve (opcion√°lis)" />
                </div>
              </div>

              <!-- Allatok Section -->
              <div class="card-section">
                <h3 class="section-title">√Ållatok (${szekreny.allatok.length})</h3>
                <div id="allatok-container-${index}">
                  ${renderAllatokEditable(szekreny.allatok, index)}
                </div>
                <button class="btn btn-success btn-lg" style="margin-top: 1rem;" onclick="addNewAllat(${index})">
                  ‚ûï √öj √Ållat
                </button>
              </div>

              <!-- Leaders Section -->
              <div class="card-section">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                  <h3 class="section-title">Ranglista (${szekreny.leaders.length})</h3>
                  <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer;">
                    <input type="checkbox" id="filter-checkbox-${index}" onchange="toggleSchoolYearFilter(${index})" />
                    <span>Csak idei eredm√©nyek</span>
                  </label>
                </div>
                <div id="leaders-container-${index}">
                  ${renderLeadersEditable(szekreny.leaders, index)}
                </div>
              </div>
            </div>
          </div>
        `;
      }

      // Render editable allatok
      function renderAllatokEditable(allatok, szekrenyIndex) {
        if (allatok.length === 0) {
          return '<div class="empty-state">M√©g nincs √°llat hozz√°adva</div>';
        }

        let html = '<table class="admin-table"><thead><tr><th>N√©v</th><th>Sz√°m</th><th>URL (opcion√°lis)</th><th style="width: 100px;">M≈±veletek</th></tr></thead><tbody>';

        allatok.forEach((allat, allatIndex) => {
          html += `
            <tr>
              <td><input type="text" class="form-control" value="${allat.nev}" onchange="updateAllat(${szekrenyIndex}, ${allatIndex}, 'nev', this.value)" /></td>
              <td><input type="number" class="form-control" value="${allat.szam}" onchange="updateAllat(${szekrenyIndex}, ${allatIndex}, 'szam', this.value)" style="width: 100px;" /></td>
              <td><input type="url" class="form-control" value="${allat.url || ''}" onchange="updateAllat(${szekrenyIndex}, ${allatIndex}, 'url', this.value)" placeholder="Wikipedia link" /></td>
              <td>
                <button class="btn btn-danger action-btn" onclick="deleteAllat(${szekrenyIndex}, ${allatIndex})">
                  üóëÔ∏è
                </button>
              </td>
            </tr>
          `;
        });

        html += '</tbody></table>';
        return html;
      }

      // Filter leaders by current school year
      function filterBySchoolYear(leaders) {
        const now = new Date();
        const currentYear = now.getFullYear();
        const currentMonth = now.getMonth(); // 0-11 (0=January)

        let startYear, endYear;

        // If we're in September-December (months 8-11), school year started this year
        if (currentMonth >= 8) {
          startYear = currentYear;
          endYear = currentYear + 1;
        } else {
          // If we're in January-August (months 0-7), school year started last year
          startYear = currentYear - 1;
          endYear = currentYear;
        }

        const startDate = new Date(startYear, 8, 1); // September 1
        const endDate = new Date(endYear, 8, 1); // September 1 of next year (exclusive)

        return leaders.filter(leader => {
          const createdDate = new Date(leader.created);
          return createdDate >= startDate && createdDate < endDate;
        });
      }

      // Render editable leaders
      function renderLeadersEditable(leaders, szekrenyIndex, filterSchoolYear = false) {
        if (leaders.length === 0) {
          return '<div class="empty-state">M√©g nincs eredm√©ny</div>';
        }

        // Apply school year filter if checkbox is checked
        let displayLeaders = filterSchoolYear ? filterBySchoolYear(leaders) : leaders;

        if (displayLeaders.length === 0) {
          return '<div class="empty-state">Nincs idei eredm√©ny</div>';
        }

        // Sort by point
        const sorted = [...displayLeaders].sort((a, b) => b.pont - a.pont);

        let html = '<table class="admin-table"><thead><tr><th>#</th><th>N√©v</th><th>Pont</th><th>D√°tum</th><th style="width: 100px;">M≈±veletek</th></tr></thead><tbody>';

        sorted.forEach((leader, i) => {
          // Find original index in the full unfiltered array
          const originalIndex = leaders.findIndex(l =>
            l.nev === leader.nev &&
            l.pont === leader.pont &&
            new Date(l.created).getTime() === new Date(leader.created).getTime()
          );
          const date = new Date(leader.created);

          html += `
            <tr>
              <th scope="row">${i + 1}</th>
              <td>${leader.nev}</td>
              <td>${leader.pont}</td>
              <td>${date.toLocaleDateString()}</td>
              <td>
                <button class="btn btn-danger action-btn" onclick="deleteLeader(${szekrenyIndex}, ${originalIndex})">
                  üóëÔ∏è
                </button>
              </td>
            </tr>
          `;
        });

        html += '</tbody></table>';
        return html;
      }

      // Toggle school year filter
      function toggleSchoolYearFilter(index) {
        const checkbox = $(`#filter-checkbox-${index}`);
        const isChecked = checkbox.is(':checked');
        const szekreny = szekrenysData[index];

        // Re-render leaders with or without filter
        $(`#leaders-container-${index}`).html(
          renderLeadersEditable(szekreny.leaders, index, isChecked)
        );
      }

      // Toggle card open/close
      function toggleCard(index) {
        const body = $(`#body-${index}`);
        const icon = $(`#icon-${index}`);

        body.toggleClass('active');
        icon.toggleClass('rotated');
      }

      // Update szekreny name
      function updateSzekrenyName(index, newName) {
        szekrenysData[index].name = newName;
        renderSzekrenys();
      }

      // Update allat field
      function updateAllat(szekrenyIndex, allatIndex, field, value) {
        szekrenysData[szekrenyIndex].allatok[allatIndex][field] = value;
      }

      // Add new allat
      function addNewAllat(szekrenyIndex) {
        szekrenysData[szekrenyIndex].allatok.push({
          nev: '',
          szam: 1,
          url: ''
        });
        refreshSzekreny(szekrenyIndex);
      }

      // Delete allat
      function deleteAllat(szekrenyIndex, allatIndex) {
        szekrenysData[szekrenyIndex].allatok.splice(allatIndex, 1);
        refreshSzekreny(szekrenyIndex);
        Swal.fire({
          toast: true,
          position: 'top-end',
          type: 'success',
          title: '√Ållat t√∂r√∂lve! Ne felejts el menteni!',
          showConfirmButton: false,
          timer: 2000
        });
      }

      // Delete leader
      function deleteLeader(szekrenyIndex, leaderIndex) {
        szekrenysData[szekrenyIndex].leaders.splice(leaderIndex, 1);
        refreshSzekreny(szekrenyIndex);
        Swal.fire({
          toast: true,
          position: 'top-end',
          type: 'success',
          title: 'Leader t√∂r√∂lve! Ne felejts el menteni!',
          showConfirmButton: false,
          timer: 2000
        });
      }

      // Refresh single szekreny display
      function refreshSzekreny(index) {
        const szekreny = szekrenysData[index];

        // Check if filter checkbox is checked
        const checkbox = $(`#filter-checkbox-${index}`);
        const isChecked = checkbox.is(':checked');

        $(`#szekreny-name-${index}`).text(szekreny.name);
        $(`#allatok-container-${index}`).html(renderAllatokEditable(szekreny.allatok, index));
        $(`#leaders-container-${index}`).html(renderLeadersEditable(szekreny.leaders, index, isChecked));

        // Update counts in header
        $(`.szekreny-card[data-index="${index}"] .section-title`).each(function() {
          if ($(this).text().includes('√Ållatok')) {
            $(this).text(`√Ållatok (${szekreny.allatok.length})`);
          } else if ($(this).text().includes('Ranglista')) {
            $(this).text(`Ranglista (${szekreny.leaders.length})`);
          }
        });
      }

      // Save szekreny data to server
      function saveSzekreny(index) {
        const szekreny = szekrenysData[index];

        // Validate
        for (let allat of szekreny.allatok) {
          if (!allat.nev || !allat.szam) {
            Swal.fire('Hiba!', 'Minden √°llatnak kell n√©v √©s sz√°m!', 'error');
            return;
          }
        }

        $.ajax({
          type: 'PUT',
          url: `/admin/szekreny/${szekreny._id}/save`,
          contentType: 'application/json',
          data: JSON.stringify({
            name: szekreny.name,
            allatok: szekreny.allatok,
            leaders: szekreny.leaders
          }),
          success: function(response) {
            if (response.success) {
              Swal.fire('Siker!', response.message, 'success');
            }
          },
          error: function() {
            Swal.fire('Hiba!', 'Nem siker√ºlt menteni!', 'error');
          }
        });
      }

      // Create new szekreny
      $('#createSzekrenyForm').on('submit', function(e) {
        e.preventDefault();

        const szekreny = $('#newSzekrenyNumber').val();
        const name = $('#newSzekrenyName').val();

        $.ajax({
          type: 'POST',
          url: '/admin/szekreny/create',
          contentType: 'application/json',
          data: JSON.stringify({ szekreny, name }),
          success: function(response) {
            if (response.success) {
              Swal.fire('Siker!', response.message, 'success').then(() => {
                window.location.reload();
              });
              $('#createSzekrenyForm')[0].reset();
            }
          },
          error: function(xhr) {
            const error = xhr.responseJSON?.error || 'Hiba t√∂rt√©nt!';
            Swal.fire('Hiba!', error, 'error');
          }
        });
      });

      // Delete szekreny
      function deleteSzekreny(index) {
        const szekreny = szekrenysData[index];

        // Debug logging
        console.log('Deleting szekreny:', szekreny);
        console.log('Szekreny ID:', szekreny._id);

        if (!szekreny._id) {
          Swal.fire('Hiba!', 'Adatb√°zis azonos√≠t√≥ hi√°nyzik!', 'error');
          return;
        }

        Swal.fire({
          title: 'Biztos vagy benne?',
          text: `A Szekr√©ny #${szekreny.szekreny} √©s az √∂sszes adata v√©glegesen t√∂rl≈ëdni fog!`,
          type: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#e74c3c',
          cancelButtonColor: '#95a5a6',
          confirmButtonText: 'Igen, t√∂rl√∂m!',
          cancelButtonText: 'M√©gse'
        }).then((result) => {
          if (result.isConfirmed) {
            console.log('Making DELETE request to:', `/admin/szekreny/${szekreny._id}`);
            $.ajax({
              type: 'DELETE',
              url: `/admin/szekreny/${szekreny._id}`,
              success: function(response) {
                console.log('Delete success:', response);
                if (response.success) {
                  Swal.fire('T√∂r√∂lve!', response.message, 'success').then(() => {
                    window.location.reload();
                  });
                }
              },
              error: function(xhr, status, error) {
                console.error('Delete error:', xhr, status, error);
                Swal.fire('Hiba!', 'Nem siker√ºlt t√∂r√∂lni: ' + error, 'error');
              }
            });
          }
        });
      }
    </script>
  </body>
</html>
